#!/usr/bin/python

def PrintAccountInfo(acinfo, keys, color, pfull = False, batch = False):
    fgnescape = '\x1b[0;38;5;{0}m'
    bgnescape = '\x1b[0;48;5;{0}m'
    fgbescape = '\x1b[1;38;5;{0}m'
    txtreset = "\x1b[0m"

    ac_color = ''
    user_color = ''
    pass_color = ''

    if color:
        ac_color = fgbescape.format(7)
        user_color = fgnescape.format(6)
        pass_color = fgnescape.format(9)

    for ac in sorted(acinfo.keys()):
        if batch:
            for (k, v) in acinfo[ac].items():
                if k in keys:
                    print(v)
        else:
            if ('user' in acinfo[ac]) and ('user' in keys):
                print("{0}{1} - {2}{3}".format(ac_color, ac, user_color, acinfo[ac]['user']))
            else: print("{0}{1}".format(ac_color, ac))

            if ('pass' in keys) and ('pass' in acinfo[ac]):
                print("\t{0}{1}".format(pass_color, acinfo[ac]['pass']))

            print(txtreset, end='')

            minlen = 0
            if 'user' in keys: minlen += 1
            if 'pass' in keys: minlen += 1

            if len(keys) > minlen:
                for (k, v) in acinfo[ac].items():
                    if (k not in ['user', 'pass']) and (k in keys):
                        print("\t{0}: {1}".format(k, v))
            elif pfull:
                for (k, v) in acinfo[ac].items():
                    if k not in ['user', 'pass']:
                        print("\t{0}: {1}".format(k, v))

def AddEntry(passfile, acname = None, pinfo = None, nfile = False):
    from rpass import ParsePassFile,ExistingEntry

    if pinfo == None and not(nfile): pinfo = ParsePassFile(passfile = passfile)
    if not(acname): acname = input("Account name: ")
    if pinfo and ((acname) in pinfo.keys()): raise ExistingEntry
    if type(pinfo) != dict: pinfo = {}
    pinfo[acname] = {}

    usr = input("{0}: User - leave blank to remove field: ".format(acname))

    from getpass import getpass as gp
    pwrd = gp("{0}: Password - leave blank to remove field (typed letters do not appear): ".format(acname))

    if usr.strip():
        pinfo[acname]['user'] = usr
    if pwrd.strip():
        pinfo[acname]['pass'] = pwrd

    response = input("Would you like to add additional fields to the entry? [N/y] ")
    if response != '' and response.lower()[0] == 'y':
        print("Please type field and hit enter - blank field cancels.")
        field = input("{0}: Field: ".format(acname))
        while(field):
            if field in ["username", "u"]: field = "user"
            if field in ["password", "p", "pass"]:
                from getpass import getpass as gp
                field = "pass"
                pinfo[acname][field] = gp("{0}: ".format(field))
            else:
                pinfo[acname][field] = input("{0}: ".format(field))
            field = input("{0}: Field: ".format(acname))
    return pinfo

def ReadConfigFile(filename, info = {}):
    """When passed a filename, reads the config file for rpass information.
    
    Returns a dictionary of useful values."""
    import configparser
    from os.path import expanduser,isfile

    if not(isfile(expanduser(filename))):
        from sys import path

        paths = ["{0}/../share/rpass/", "/usr/share/rpass/", "/usr/local/share/rpass/"]
        paths = [p + 'rpass.example.conf' for p in paths]

        fexample = None
        for p in paths:
            if isfile(p): 
                fexample = p
                break

        if not(fexample):
            print("Could not find default config rpass.example.conf.")
            info['fields'] = []
            return info

        else:
            from shutil import copyfile
            try:
                copyfile(fexample, expanduser(filename))
                print("Copied example config (default values) to {0}.".format(filename))
                print("----------------------------------------------\n")
            except IOError as e:
                print("Could not copy default config to {0}.".format(filename))
                print(e)
                info['fields'] = []
                return info

    config = configparser.ConfigParser()
    config.read(expanduser(filename))

    if config.has_option('display', 'fields'): 
        info['fields'] = [field.strip() for field in 
                config.get('display', 'fields').split(',') if field.strip()]
        if len([f for f in info['fields'] if f.strip()]) == 0: info['fields'] = [None]
    if config.has_option('display', 'color'):
        if config.get('display', 'color').lower()[0] == 'y': info['color'] = True
        else: info['color'] = False

    if config.has_option('general', 'passfile'):
        from os.path import expanduser
        info['passfile'] = expanduser(config.get('general', 'passfile'))

    return info

def HasGPGKey():
    """Checks if the user has a gpg key pair. If not creates it."""
    from os import stat
    from os.path import expanduser,isfile,join

    secring = join(expanduser('~'), '.gnupg', 'secring.gpg')
    if not(isfile(secring)) or stat(secring).st_size == 0: return False
    else: return True

def CreateGPGKey():
    """Creates a gpg key for the user."""
    from subprocess import call
    print("Need to first create gpg key pair.")
    print("Choose a secure passphrase -- this is going to be your 'master' password.")
    print("Rerun program after key creation.\n")
    print("WARNING: DO NOT pick a sign-only key type.\n")
    print("-------------------------------------------------------------------------")
    input("Press [ENTER] when ready.")
    call('gpg --gen-key'.split(' '))

def ConstructFields(primary, secondary, default = []):
    """Constructs a list of fields, primary overrides secondary overrides default."""
    
    if primary:
        return primary
    elif secondary:
        return secondary
    else:
        return default

def GetOptions():
    """Gets options from user through configuration file and commandline."""
    from optparse import OptionParser

    parser = OptionParser()

    parser.add_option("-b", "--batch", dest="batch_mode",
            action="store_true", default=False,
            help="Option to print in batch mode: no colors, no copying, no field labels, no formatting.")

    parser.add_option("-u", "--users", dest="print_users",
            action="store_true", default=False,
            help="Add users to printed fields.")

    parser.add_option("-p", "--passwords", dest="print_pass",
            action="store_true", default=False,
            help="Add passwords to printed fields.")

    parser.add_option("-n", "--no-copy", dest="no_xclip",
            action="count", default = 0,
            help="Don't copy alphabetically first matching password to clipboard.")

    parser.add_option("--copy", dest="xclip",
            action="count", default = 0,
            help="Copy alphabetically first matching password to clipboard [default].")

    parser.add_option("-l", "--login", dest="login",
            action="store_true", default=False,
            help="Just login, don't show anything.")

    parser.add_option("-a", "--add-entry", dest="new_entry",
            action="store_true", default=False,
            help = "Add account(s). Optionally list new account names on the commandline.")

    parser.add_option("-d", "--delete-entry", dest="delete_entry",
            action = "store_true", default=False,
            help = "Specify account(s) to delete on commandline. Must match exactly.")

    parser.add_option("-k", "--keys", dest="print_keys",
            action = "store", type = "string",
            help = "Specify, in a comma-separated list (no spaces), which fields to print: i.e., custom1,custom2.\nUse --users and --passwords for non-custom fields.")

    parser.add_option('-f', '--password-file', dest = 'pass_file',
            action = 'store', type = 'string',
            help = "Specify a password file other than the default [~/.passwords.gpg].")

    parser.add_option("-C", "--config-file", dest="conf_file",
            action = "store", type = "string",
            help = "Specify a configuration file other than the default [~/.rpass.conf].")

    parser.add_option("-c", "--color", dest='color',
            action = "count", default = 0,
            help = "Enable color printing.")

    parser.add_option('--no-color', dest='no_color',
            action = "count", default = 0,
            help = "Disable color printing [default].")

    (options, args) = parser.parse_args()

    info = {}
    if options.conf_file:
        info = ReadConfigFile(options.conf_file)
    else:
        info = ReadConfigFile('~/.rpass.conf')

    fops = {k:v for (k, v) in info.items()}
    fops['batch'] = options.batch_mode
    if options.xclip > 0: fops['copy'] = True
    if options.no_xclip > 0: fops['copy'] = False
    if 'copy' not in fops: fops['copy'] = True
    fops['login'] = options.login
    fops['new_entry'] = options.new_entry
    fops['del_entry'] = options.delete_entry
    if options.color > 0: fops['color'] = True
    if options.no_color > 0: fops['color'] = False
    if 'color' not in fops: fops['color'] = False

    if not(options.print_keys): fops['fields'] = []
    else: fops['fields'] = [f.strip() for f in options.print_keys.split(',') if f.strip()]
    if options.print_users: fops['fields'].append('user')
    if options.print_pass: fops['fields'].extend(["pass"])

    # Commandline overrides config file
    fops['fields'] = ConstructFields(primary = fops['fields'], secondary = info['fields'])
    if fops['fields'] == [None]: fops['fields'] = []

    if options.pass_file: fops['passfile'] = options.pass_file
    if 'passfile' not in fops: fops['passfile'] = '~/.passwords.gpg'

    from os.path import expanduser
    fops['passfile'] = expanduser(fops['passfile'])

    return (fops, args)

if __name__=="__main__":
    import rpass
    from os.path import expanduser,isfile
    from os.path import join as path_join
    from os import stat
    import subprocess

    if not(HasGPGKey()):
        CreateGPGKey()
        exit()

    if not(rpass.IsRunning('gpg-agent')):
        print("gpg-agent is not running. This is not recommended. Continuing anyway...")

    (options, args) = GetOptions()

    if options['login']:
        try:
            rpass.DecryptPassFile(passfile = options['passfile'])
            exit(0)
        except rpass.InvalidEncryptionKey:
            print("Login failed (bad password or bad keyfile).")
            exit(1)

    elif options['new_entry']:
        pinfo = None

        try:
            if len(args) > 0:
                for arg in args: pinfo = AddEntry(passfile = options['passfile'], acname = arg, pinfo = pinfo)
            else: pinfo = AddEntry(passfile = options['passfile'], pinfo = pinfo)
        except IOError:
            response = input("No password file found. Shall I create one? [Y/n] ")
            if response == '' or response.lower()[0] != 'n':
                FILE = open(options['passfile'], 'w'); FILE.close()
                if len(args) > 0:
                    pinfo = AddEntry(passfile = options['passfile'], acname = args[0], pinfo = pinfo, nfile = True)
                    for arg in args[1:]: pinfo = AddEntry(passfile = options['passfile'], acname = arg, pinfo = pinfo, nfile = False)
                else: pinfo = AddEntry(passfile = options['passfile'], pinfo = pinfo, nfile = True)

        if pinfo: rpass.EncryptPassFile(passfile = options['passfile'], contents = rpass.CreatePassFile(pinfo))
        exit()

    elif options['del_entry']:
        try:
            if len(args) > 0:
                for arg in args: rpass.DeleteEntry(passfile = options['passfile'], entry = arg)
            else: print ("Please specify entry or entries to delete.")
        except rpass.NonExistentEntry:
            print("One of your entries does not exist. Deleting operation halted.")
        exit()

    else:
        acinfo = {}
        pfull = False

        try:
            if len(args) > 0:

                pfull = True

                for arg in args: 
                    acinfo.update(rpass.GetAccountInfo(passfile = options['passfile'], account = arg, strict = options['batch']))

                # Copy passwords...
                if not(options['batch']) and options['copy']:
                    try:
                        rpass.CopyPass(acinfo=acinfo)
                    except OSError:
                        print("'xclip' not found. Please install xclip to automatically copy first matched password to clipboard (avoid printing passwords).")
                        print("To see passwords, run rpass with the --passwords option.\n")

            else:
                acinfo = rpass.ParsePassFile(passfile = options['passfile'])

            PrintAccountInfo(acinfo=acinfo, pfull = pfull, color = options['color'], keys = options['fields'], batch = options['batch'])
        except IOError:
            print("No password file found...create it with 'rpass -a'")
